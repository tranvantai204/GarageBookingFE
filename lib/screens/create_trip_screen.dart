import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:provider/provider.dart';
import '../constants/api_constants.dart';
import '../providers/user_provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:image_picker/image_picker.dart';
import '../api/vehicle_service.dart';
import '../utils/date_utils.dart';

class CreateTripScreen extends StatefulWidget {
  final bool showAppBar;

  const CreateTripScreen({super.key, this.showAppBar = true});

  @override
  State<CreateTripScreen> createState() => _CreateTripScreenState();
}

class _CreateTripScreenState extends State<CreateTripScreen> {
  final _formKey = GlobalKey<FormState>();
  final _diemDiController = TextEditingController();
  final _diemDenController = TextEditingController();
  final _taiXeController = TextEditingController();
  final _bienSoXeController = TextEditingController();
  final _giaVeController = TextEditingController();
  String? _selectedVehicleId;
  String? _selectedVehicleLabel;
  List<String> _selectedVehicleImages = [];

  DateTime? _selectedDateTime;
  int _soGhe = 16;
  bool _isLoading = false;

  String? _selectedDriverId;
  String? _selectedDriverName;
  String _selectedVehicleType = 'ghe_ngoi';

  final List<String> _tinhThanhVietNam = [
    'An Giang',
    'B√† R·ªãa - V≈©ng T√†u',
    'B·∫Øc Giang',
    'B·∫Øc K·∫°n',
    'B·∫°c Li√™u',
    'B·∫Øc Ninh',
    'B·∫øn Tre',
    'B√¨nh ƒê·ªãnh',
    'B√¨nh D∆∞∆°ng',
    'B√¨nh Ph∆∞·ªõc',
    'B√¨nh Thu·∫≠n',
    'C√† Mau',
    'Cao B·∫±ng',
    'ƒê·∫Øk L·∫Øk',
    'ƒê·∫Øk N√¥ng',
    'ƒêi·ªán Bi√™n',
    'ƒê·ªìng Nai',
    'ƒê·ªìng Th√°p',
    'Gia Lai',
    'H√† Giang',
    'H√† Nam',
    'H√† N·ªôi',
    'H√† Tƒ©nh',
    'H·∫£i D∆∞∆°ng',
    'H·∫£i Ph√≤ng',
    'H·∫≠u Giang',
    'H√≤a B√¨nh',
    'H∆∞ng Y√™n',
    'Kh√°nh H√≤a',
    'Ki√™n Giang',
    'Kon Tum',
    'Lai Ch√¢u',
    'L√¢m ƒê·ªìng',
    'L·∫°ng S∆°n',
    'L√†o Cai',
    'Long An',
    'Nam ƒê·ªãnh',
    'Ngh·ªá An',
    'Ninh B√¨nh',
    'Ninh Thu·∫≠n',
    'Ph√∫ Th·ªç',
    'Ph√∫ Y√™n',
    'Qu·∫£ng B√¨nh',
    'Qu·∫£ng Nam',
    'Qu·∫£ng Ng√£i',
    'Qu·∫£ng Ninh',
    'Qu·∫£ng Tr·ªã',
    'S√≥c TrƒÉng',
    'S∆°n La',
    'T√¢y Ninh',
    'Th√°i B√¨nh',
    'Th√°i Nguy√™n',
    'Thanh H√≥a',
    'Th·ª´a Thi√™n Hu·∫ø',
    'Ti·ªÅn Giang',
    'TP. H·ªì Ch√≠ Minh',
    'Tr√† Vinh',
    'Tuy√™n Quang',
    'Vƒ©nh Long',
    'Vƒ©nh Ph√∫c',
    'Y√™n B√°i',
    'C·∫ßn Th∆°',
    'ƒê√† N·∫µng',
  ];

  @override
  void initState() {
    super.initState();
    // Load drivers from database
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<UserProvider>(context, listen: false).loadUsers();
    });
  }

  @override
  void dispose() {
    _diemDiController.dispose();
    _diemDenController.dispose();
    _taiXeController.dispose();
    _bienSoXeController.dispose();
    _giaVeController.dispose();
    super.dispose();
  }

  // H√†m helper ƒë·ªÉ format th·ªùi gian g·ª≠i l√™n server
  String _formatDateTimeForServer(DateTime dateTime) {
    // G·ª≠i th·ªùi gian local v·ªõi timezone offset
    // V√≠ d·ª•: 2025-01-07T12:00:00+07:00
    final localDateTime = DateTime(
      dateTime.year,
      dateTime.month,
      dateTime.day,
      dateTime.hour,
      dateTime.minute,
    );
    return dateTime.toUtc().toIso8601String();
  }

  Future<void> _selectDateTime() async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: _selectedDateTime ?? DateTime.now().add(Duration(hours: 1)),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(Duration(days: 30)),
    );

    if (pickedDate != null) {
      final TimeOfDay? pickedTime = await showTimePicker(
        context: context,
        initialTime: _selectedDateTime != null
            ? TimeOfDay.fromDateTime(_selectedDateTime!)
            : TimeOfDay.now(),
      );

      if (pickedTime != null) {
        setState(() {
          // T·∫°o DateTime v·ªõi th·ªùi gian local ƒë∆∞·ª£c ch·ªçn
          _selectedDateTime = DateTime(
            pickedDate.year,
            pickedDate.month,
            pickedDate.day,
            pickedTime.hour,
            pickedTime.minute,
          );

          // Debug log
          print('üïê Selected time: $_selectedDateTime');
          print('üïê Selected time local: ${_selectedDateTime!.toLocal()}');
          print('üïê Selected time UTC: ${_selectedDateTime!.toUtc()}');
        });
      }
    }
  }

  Future<void> _createTrip() async {
    print('üöå Starting create trip...');

    // Debug: Check current user role from SharedPreferences
    final prefs = await SharedPreferences.getInstance();
    final currentRole = prefs.getString('vaiTro') ?? 'user';
    final userId = prefs.getString('userId') ?? '';
    print('üîç Current user role from SharedPreferences: $currentRole');
    print('üîç Current user ID: $userId');

    // CRITICAL: Verify role from server to avoid SharedPreferences issues
    try {
      print('üåê Calling API to verify user role...');
      final token = prefs.getString('token') ?? '';
      print(
        'üîë Using token: ${token.isNotEmpty ? "***${token.substring(token.length - 10)}" : "EMPTY"}',
      );

      final response = await http
          .get(
            Uri.parse('https://garagebooking.onrender.com/api/auth/me'),
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer $token',
            },
          )
          .timeout(const Duration(seconds: 10));

      print('üì° API response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final userData = data['data'];

        if (userData != null) {
          final serverRole = userData['vaiTro'] ?? 'user';
          print('üîç Server role for user: $serverRole');

          if (serverRole != 'admin') {
            print('‚ùå Access denied: Server role is "$serverRole", not "admin"');
            if (mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ t·∫°o chuy·∫øn ƒëi!'),
                  backgroundColor: Colors.red,
                ),
              );
            }
            return;
          }
        } else {
          print('‚ùå User data not found in response');
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!'),
                backgroundColor: Colors.red,
              ),
            );
          }
          return;
        }
      }
    } catch (e) {
      print('‚ùå Error verifying user role: $e');
      // Fallback to SharedPreferences if API fails
      if (currentRole != 'admin') {
        print('‚ùå Fallback: Access denied based on SharedPreferences');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ t·∫°o chuy·∫øn ƒëi!'),
              backgroundColor: Colors.red,
            ),
          );
        }
        return;
      }
    }

    if (!_formKey.currentState!.validate() || _selectedDateTime == null) {
      print('‚ùå Validation failed');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
            'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† ch·ªçn th·ªùi gian kh·ªüi h√†nh',
          ),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      print('üìù Form data:');
      print('- ƒêi·ªÉm ƒëi: ${_diemDiController.text}');
      print('- ƒêi·ªÉm ƒë·∫øn: ${_diemDenController.text}');
      print('- Th·ªùi gian local: $_selectedDateTime');
      print(
        '- Th·ªùi gian g·ª≠i server: ${_formatDateTimeForServer(_selectedDateTime!)}',
      );
      print('- S·ªë gh·∫ø: $_soGhe');
      print('- Lo·∫°i xe: $_selectedVehicleType');
      print('- Gi√° v√©: ${_giaVeController.text}');
      print('- T√†i x·∫ø: $_selectedDriverName');
      print('- Driver ID: $_selectedDriverId');

      // Debug th√™m v·ªÅ timezone
      print('üåç Timezone debug:');
      print('- Local timezone offset: ${DateTime.now().timeZoneOffset}');
      print('- Selected time in UTC: ${_selectedDateTime!.toUtc()}');
      print('- Selected time in local: ${_selectedDateTime!.toLocal()}');
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('token');

      if (token == null) {
        throw Exception('Kh√¥ng t√¨m th·∫•y token ƒëƒÉng nh·∫≠p');
      }

      final response = await http.post(
        Uri.parse('${ApiConstants.baseUrl}/trips'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'diemDi': _diemDiController.text.trim(),
          'diemDen': _diemDenController.text.trim(),
          'thoiGianKhoiHanh': _formatDateTimeForServer(_selectedDateTime!),
          'soGhe': _soGhe,
          'loaiXe': _selectedVehicleType,
          'giaVe': int.parse(_giaVeController.text),
          'taiXe': _selectedDriverName ?? 'Ch∆∞a ph√¢n c√¥ng',
          'taiXeId': _selectedDriverId,
          'bienSoXe': _bienSoXeController.text.trim().isEmpty
              ? 'Ch∆∞a c·∫≠p nh·∫≠t'
              : _bienSoXeController.text.trim(),
          'vehicleId': _selectedVehicleId,
        }),
      );

      if (response.statusCode == 201) {
        // Debug response data
        final responseData = jsonDecode(response.body);
        print('‚úÖ T·∫°o chuy·∫øn th√†nh c√¥ng!');
        print('üìã Response data: $responseData');

        if (responseData['trip'] != null) {
          print('üìã Trip data from server:');
          print(
            '- Server thoiGianKhoiHanh: ${responseData['trip']['thoiGianKhoiHanh']}',
          );
          if (responseData['trip']['thoiGianKhoiHanh'] != null) {
            final serverTime = DateTime.parse(
              responseData['trip']['thoiGianKhoiHanh'],
            );
            print('- Server time parsed: $serverTime');
            print('- Server time local: ${serverTime.toLocal()}');
            print('- Server time UTC: ${serverTime.toUtc()}');
          }
        }

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('T·∫°o chuy·∫øn ƒëi th√†nh c√¥ng!'),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 2),
            ),
          );

          // Delay ƒë·ªÉ user th·∫•y snackbar
          await Future.delayed(const Duration(milliseconds: 1000));

          if (mounted) {
            // Ki·ªÉm tra Navigator history tr∆∞·ªõc khi pop
            if (Navigator.canPop(context)) {
              Navigator.pop(context, true);
            } else {
              // N·∫øu kh√¥ng th·ªÉ pop, navigate v·ªÅ trips screen
              Navigator.pushNamedAndRemoveUntil(
                context,
                '/trips',
                (route) => false,
              );
            }
          }
        }
      } else {
        throw Exception(
          'L·ªói t·∫°o chuy·∫øn ƒëi: ${response.statusCode} - ${response.body}',
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('L·ªói: $e'), backgroundColor: Colors.red),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Widget _buildDriverSelector() {
    return Consumer<UserProvider>(
      builder: (context, userProvider, child) {
        final drivers = userProvider.drivers;

        return Container(
          decoration: BoxDecoration(
            border: Border.all(color: Colors.grey),
            borderRadius: BorderRadius.circular(4),
          ),
          child: Column(
            children: [
              // Dropdown ch·ªçn t√†i x·∫ø
              DropdownButtonFormField<String>(
                value: _selectedDriverId,
                decoration: const InputDecoration(
                  border: InputBorder.none,
                  contentPadding: EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 8,
                  ),
                  hintText: 'Ch·ªçn t√†i x·∫ø t·ª´ danh s√°ch',
                ),
                items: [
                  const DropdownMenuItem<String>(
                    value: null,
                    child: Text('Kh√¥ng ch·ªçn t√†i x·∫ø'),
                  ),
                  ...drivers.map((driver) {
                    return DropdownMenuItem<String>(
                      value: driver.id,
                      child: Text(
                        '${driver.hoTen} (${driver.soDienThoai})',
                        style: const TextStyle(fontWeight: FontWeight.bold),
                        overflow: TextOverflow.ellipsis,
                      ),
                    );
                  }),
                ],
                onChanged: (String? newValue) {
                  try {
                    setState(() {
                      _selectedDriverId = newValue;
                      if (newValue != null && drivers.isNotEmpty) {
                        final driver = drivers.firstWhere(
                          (d) => d.id == newValue,
                          orElse: () => drivers.first,
                        );
                        _selectedDriverName = driver.hoTen;
                        _taiXeController.text = driver.hoTen;
                        _bienSoXeController.text =
                            driver.bienSoXe ?? 'Ch∆∞a c·∫≠p nh·∫≠t';
                      } else {
                        _selectedDriverName = null;
                        _taiXeController.clear();
                        _bienSoXeController.clear();
                      }
                    });
                  } catch (e) {
                    print('‚ùå Error selecting driver: $e');
                    if (mounted) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('L·ªói ch·ªçn t√†i x·∫ø: $e'),
                          backgroundColor: Colors.red,
                        ),
                      );
                    }
                  }
                },
              ),

              // Hi·ªÉn th·ªã th√¥ng tin t√†i x·∫ø ƒë√£ ch·ªçn
              if (_selectedDriverId != null) ...[
                const Divider(height: 1),
                Container(
                  padding: const EdgeInsets.all(12),
                  color: Colors.blue.shade50,
                  child: Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.blue.shade100,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Icon(
                          Icons.person,
                          color: Colors.blue,
                          size: 20,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              _selectedDriverName!,
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Row(
                              children: [
                                Icon(
                                  Icons.directions_car,
                                  size: 14,
                                  color: Colors.grey.shade600,
                                ),
                                const SizedBox(width: 4),
                                Text(
                                  _bienSoXeController.text,
                                  style: TextStyle(
                                    color: Colors.grey.shade600,
                                    fontSize: 14,
                                  ),
                                ),
                                const SizedBox(width: 16),
                                Icon(
                                  Icons.phone,
                                  size: 14,
                                  color: Colors.grey.shade600,
                                ),
                                const SizedBox(width: 4),
                                Text(
                                  drivers
                                      .firstWhere(
                                        (d) => d.id == _selectedDriverId,
                                      )
                                      .soDienThoai,
                                  style: TextStyle(
                                    color: Colors.grey.shade600,
                                    fontSize: 14,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      IconButton(
                        onPressed: () {
                          setState(() {
                            _selectedDriverId = null;
                            _selectedDriverName = null;
                            _taiXeController.clear();
                            _bienSoXeController.clear();
                          });
                        },
                        icon: const Icon(Icons.clear, color: Colors.red),
                        tooltip: 'B·ªè ch·ªçn t√†i x·∫ø',
                      ),
                    ],
                  ),
                ),
              ],
            ],
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final content = SingleChildScrollView(
      padding: const EdgeInsets.all(20.0),
      child: Form(
        key: _formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Colors.blue.shade600, Colors.blue.shade300],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: const [
                  Text(
                    'T·∫°o chuy·∫øn ƒëi',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 22,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 6),
                  Text(
                    'Nh·∫≠p th√¥ng tin chi ti·∫øt chuy·∫øn ƒëi',
                    style: TextStyle(color: Colors.white70),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),

            // Ch·ªçn xe (t√πy ch·ªçn)
            Text(
              'Ch·ªçn xe (t√πy ch·ªçn)',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            _buildVehicleSelector(),
            const SizedBox(height: 16),
            // ƒêi·ªÉm ƒëi
            _buildSearchableDropdown(
              label: 'ƒêi·ªÉm ƒëi',
              hint: 'Ch·ªçn ƒëi·ªÉm ƒëi',
              value: _diemDiController.text.isEmpty
                  ? null
                  : _diemDiController.text,
              items: _tinhThanhVietNam,
              onChanged: (String? newValue) {
                if (newValue != null) {
                  _diemDiController.text = newValue;
                }
              },
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Vui l√≤ng ch·ªçn ƒëi·ªÉm ƒëi';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // ƒêi·ªÉm ƒë·∫øn
            _buildSearchableDropdown(
              label: 'ƒêi·ªÉm ƒë·∫øn',
              hint: 'Ch·ªçn ƒëi·ªÉm ƒë·∫øn',
              value: _diemDenController.text.isEmpty
                  ? null
                  : _diemDenController.text,
              items: _tinhThanhVietNam,
              onChanged: (String? newValue) {
                if (newValue != null) {
                  _diemDenController.text = newValue;
                }
              },
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Vui l√≤ng ch·ªçn ƒëi·ªÉm ƒë·∫øn';
                }
                if (value == _diemDiController.text) {
                  return 'ƒêi·ªÉm ƒë·∫øn ph·∫£i kh√°c ƒëi·ªÉm ƒëi';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // Th·ªùi gian kh·ªüi h√†nh
            Text(
              'Th·ªùi gian kh·ªüi h√†nh',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            _buildTimePicker(),
            const SizedBox(height: 16),

            // S·ªë gh·∫ø
            Text(
              'S·ªë gh·∫ø',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            DropdownButtonFormField<int>(
              value: _soGhe,
              decoration: const InputDecoration(border: OutlineInputBorder()),
              items: [16, 20, 24, 28, 32].map((int value) {
                return DropdownMenuItem<int>(
                  value: value,
                  child: Text('$value gh·∫ø'),
                );
              }).toList(),
              onChanged: (int? newValue) {
                if (newValue != null) {
                  setState(() {
                    _soGhe = newValue;
                  });
                }
              },
            ),
            const SizedBox(height: 16),

            // Gi√° v√©
            Text(
              'Gi√° v√© (VNƒê)',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            TextFormField(
              controller: _giaVeController,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                hintText: 'Nh·∫≠p gi√° v√©',
                suffixText: 'VNƒê',
              ),
              keyboardType: TextInputType.number,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Vui l√≤ng nh·∫≠p gi√° v√©';
                }
                if (int.tryParse(value) == null || int.parse(value) <= 0) {
                  return 'Gi√° v√© ph·∫£i l√† s·ªë d∆∞∆°ng';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // Lo·∫°i xe
            Text(
              'Lo·∫°i xe',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            DropdownButtonFormField<String>(
              value: _selectedVehicleType,
              decoration: const InputDecoration(border: OutlineInputBorder()),
              items: const [
                DropdownMenuItem(value: 'ghe_ngoi', child: Text('Gh·∫ø ng·ªìi')),
                DropdownMenuItem(
                  value: 'giuong_nam',
                  child: Text('Gi∆∞·ªùng n·∫±m'),
                ),
                DropdownMenuItem(value: 'limousine', child: Text('Limousine')),
              ],
              onChanged: (String? newValue) {
                if (newValue != null) {
                  setState(() {
                    _selectedVehicleType = newValue;
                  });
                }
              },
            ),
            const SizedBox(height: 16),

            // Ch·ªçn t√†i x·∫ø
            Text(
              'Ch·ªçn t√†i x·∫ø',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            _buildDriverSelector(),
            const SizedBox(height: 16),
            const SizedBox(height: 32),

            // N√∫t t·∫°o chuy·∫øn ƒëi
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _isLoading ? null : _createTrip,
                icon: const Icon(Icons.add_road_rounded),
                label: _isLoading
                    ? const Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          SizedBox(
                            width: 20,
                            height: 20,
                            child: CircularProgressIndicator(
                              color: Colors.white,
                              strokeWidth: 2,
                            ),
                          ),
                          SizedBox(width: 12),
                          Text('ƒêang t·∫°o chuy·∫øn ƒëi...'),
                        ],
                      )
                    : const Text(
                        'T·∫°o chuy·∫øn ƒëi',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue.shade600,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );

    if (widget.showAppBar) {
      return WillPopScope(
        onWillPop: () async {
          // ƒê·∫£m b·∫£o navigation an to√†n khi back
          return true;
        },
        child: Scaffold(
          appBar: AppBar(
            title: const Text('T·∫°o chuy·∫øn ƒëi m·ªõi'),
            backgroundColor: Colors.blue,
            foregroundColor: Colors.white,
          ),
          body: content,
        ),
      );
    }

    return content;
  }

  // Widget t√¨m ki·∫øm t·ªânh th√†nh c·∫£i ti·∫øn
  Widget _buildSearchableDropdown({
    required String label,
    required String hint,
    required String? value,
    required List<String> items,
    required Function(String?) onChanged,
    required String? Function(String?) validator,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 8),
        DropdownButtonFormField<String>(
          value: value,
          decoration: InputDecoration(
            border: const OutlineInputBorder(),
            hintText: hint,
            prefixIcon: const Icon(Icons.location_on, color: Colors.blue),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 12,
              vertical: 16,
            ),
          ),
          isExpanded: true,
          items: items.map((String item) {
            return DropdownMenuItem<String>(
              value: item,
              child: Text(
                item,
                style: const TextStyle(fontSize: 14),
                overflow: TextOverflow.ellipsis,
              ),
            );
          }).toList(),
          onChanged: onChanged,
          validator: validator,
          dropdownColor: Colors.white,
          style: const TextStyle(color: Colors.black87, fontSize: 14),
          icon: const Icon(Icons.arrow_drop_down, color: Colors.blue),
        ),
      ],
    );
  }

  Widget _buildTimePicker() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
        borderRadius: BorderRadius.circular(8),
        color: Colors.grey.shade50,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Th·ªùi gian ƒë√£ ch·ªçn:',
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Colors.grey.shade700,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            _selectedDateTime == null
                ? 'Ch∆∞a ch·ªçn th·ªùi gian'
                : AppDateUtils.formatVietnameseDateTime(_selectedDateTime!),
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: _selectedDateTime == null
                  ? Colors.grey.shade500
                  : Colors.black87,
            ),
          ),
          const SizedBox(height: 12),
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: _selectDateTime,
              icon: const Icon(Icons.access_time, size: 20),
              label: const Text(
                'Ch·ªçn th·ªùi gian kh·ªüi h√†nh',
                style: TextStyle(fontSize: 16),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF1E88E5),
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                elevation: 2,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildVehicleSelector() {
    return FutureBuilder<List<Map<String, dynamic>>>(
      future: _fetchVehicles(),
      builder: (context, snapshot) {
        final isLoading = snapshot.connectionState == ConnectionState.waiting;
        final items = snapshot.data ?? [];
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            InputDecorator(
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                contentPadding: EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 8,
                ),
              ),
              child: DropdownButtonHideUnderline(
                child: DropdownButton<String?>(
                  isExpanded: true,
                  value: _selectedVehicleId,
                  hint: Text(
                    isLoading ? 'ƒêang t·∫£i danh s√°ch xe...' : 'Kh√¥ng ch·ªçn xe',
                  ),
                  items: [
                    const DropdownMenuItem<String?>(
                      value: null,
                      child: Text('Kh√¥ng ch·ªçn xe'),
                    ),
                    ...items.map((v) {
                      final label =
                          '${v['hangXe'] ?? ''} ${v['tenXe'] ?? ''} - ${v['bienSoXe'] ?? ''}'
                              .trim();
                      return DropdownMenuItem<String?>(
                        value: v['_id'] as String?,
                        child: Text(
                          label.isEmpty ? (v['bienSoXe'] ?? '') : label,
                          overflow: TextOverflow.ellipsis,
                        ),
                      );
                    }),
                  ],
                  onChanged: (val) {
                    setState(() {
                      _selectedVehicleId = val;
                      if (val == null) {
                        _selectedVehicleLabel = null;
                        _selectedVehicleImages = [];
                      } else {
                        final v = items.firstWhere(
                          (e) => e['_id'] == val,
                          orElse: () => {},
                        );
                        _selectedVehicleLabel =
                            '${v['hangXe'] ?? ''} ${v['tenXe'] ?? ''} - ${v['bienSoXe'] ?? ''}'
                                .trim();
                        _bienSoXeController.text = (v['bienSoXe'] ?? '')
                            .toString();
                        _selectedVehicleType = (v['loaiXe'] ?? 'ghe_ngoi')
                            .toString();
                        _soGhe = (v['soGhe'] ?? _soGhe) as int;
                        final imgs =
                            (v['hinhAnh'] as List?)
                                ?.map((e) => e.toString())
                                .toList() ??
                            [];
                        _selectedVehicleImages = imgs;
                      }
                    });
                  },
                ),
              ),
            ),
            if (_selectedVehicleLabel != null) ...[
              const SizedBox(height: 8),
              Text(
                'ƒê√£ ch·ªçn: $_selectedVehicleLabel',
                style: const TextStyle(color: Colors.blue),
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  ElevatedButton.icon(
                    onPressed: _selectedVehicleId == null
                        ? null
                        : _addVehicleImages,
                    icon: const Icon(Icons.add_photo_alternate),
                    label: const Text('Th√™m ·∫£nh xe'),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton.icon(
                    onPressed: _selectedVehicleId == null
                        ? null
                        : _addVehicleImageByUrl,
                    icon: const Icon(Icons.link),
                    label: const Text('Th√™m t·ª´ URL'),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              if (_selectedVehicleImages.isNotEmpty)
                SizedBox(
                  height: 80,
                  child: ListView.separated(
                    scrollDirection: Axis.horizontal,
                    itemCount: _selectedVehicleImages.length,
                    separatorBuilder: (_, __) => const SizedBox(width: 8),
                    itemBuilder: (context, index) {
                      final url = _selectedVehicleImages[index];
                      return ClipRRect(
                        borderRadius: BorderRadius.circular(8),
                        child: Image.network(
                          _displayImageUrl(url),
                          width: 120,
                          height: 80,
                          fit: BoxFit.cover,
                          errorBuilder: (_, __, ___) => Container(
                            width: 120,
                            height: 80,
                            color: Colors.grey.shade300,
                            child: const Icon(Icons.broken_image),
                          ),
                        ),
                      );
                    },
                  ),
                ),
            ],
          ],
        );
      },
    );
  }

  Future<List<Map<String, dynamic>>> _fetchVehicles() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('token') ?? '';
      final resp = await http.get(
        Uri.parse('${ApiConstants.baseUrl}/vehicles'),
        headers: {'Authorization': 'Bearer $token'},
      );
      if (resp.statusCode == 200) {
        final data = jsonDecode(resp.body);
        return (data['data'] as List).cast<Map<String, dynamic>>();
      }
    } catch (_) {}
    return [];
  }

  Future<void> _addVehicleImages() async {
    try {
      final picker = ImagePicker();
      final picked = await picker.pickMultiImage(
        imageQuality: 85,
        maxWidth: 1920,
      );
      if (picked.isEmpty) return;
      final paths = picked.map((x) => x.path).toList();
      final urls = await VehicleService.uploadImages(paths);

      // Merge ·∫£nh m·ªõi v√†o preview c·ª•c b·ªô
      setState(() {
        _selectedVehicleImages.addAll(urls);
      });

      // L∆∞u v√†o vehicle b√™n server
      if (_selectedVehicleId != null) {
        await VehicleService.updateVehicle(_selectedVehicleId!, {
          'hinhAnh': _selectedVehicleImages,
        });
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Upload ·∫£nh l·ªói: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  String _displayImageUrl(String url) {
    if (url.startsWith('http://') || url.startsWith('https://')) return url;
    return ApiConstants.baseUrl + url;
  }

  Future<void> _addVehicleImageByUrl() async {
    String url = '';
    await showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('Th√™m ·∫£nh t·ª´ URL'),
        content: TextFormField(
          autofocus: true,
          decoration: const InputDecoration(
            hintText: 'D√°n ƒë∆∞·ªùng d·∫´n ·∫£nh (http/https)',
            border: OutlineInputBorder(),
          ),
          onChanged: (v) => url = v.trim(),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(ctx),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (!url.startsWith('http')) return; // ƒë∆°n gi·∫£n
              Navigator.pop(ctx);
              setState(() => _selectedVehicleImages.add(url));
              if (_selectedVehicleId != null) {
                await VehicleService.updateVehicle(_selectedVehicleId!, {
                  'hinhAnh': _selectedVehicleImages,
                });
              }
            },
            child: const Text('Th√™m'),
          ),
        ],
      ),
    );
  }
}
